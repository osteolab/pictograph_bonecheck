def clean_up_github_images(repo_name, token):
    import requests
    try:
        url = f"https://api.github.com/repos/{repo_name}/contents/"
        headers = {
            'Authorization': f'token {token}',
            'Content-Type': 'application/json',
        }

        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            files = response.json()
            image_files = [file for file in files if file['name'].startswith('riskfx') and file['name'].endswith('.png')]

            # Sort by last modified (assuming they are sorted by default, else sort manually)
            image_files = sorted(image_files, key=lambda x: x['name'], reverse=True)

            # Keep the latest 10 images
            if len(image_files) > 10:
                old_files = image_files[10:]  # Images to delete
                for file in old_files:
                    path = file['path']  # Extract the correct path
                    delete_url = f"https://api.github.com/repos/{repo_name}/contents/{path}"
                    delete_data = {
                        "message": f"Deleting old image: {path}",
                        "sha": file['sha']  # File's SHA
                    }
                    delete_response = requests.delete(delete_url, headers=headers, json=delete_data)
                    if delete_response.status_code not in [200, 204]:
                        raise Exception(f"Failed to delete {path}: {delete_response.json()}")
        else:
            raise Exception(f"Failed to fetch contents: {response.json()}")

    except Exception as e:
        print(f"An error occurred during cleanup: {e}")
