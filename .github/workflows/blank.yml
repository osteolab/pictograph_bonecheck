name: Clean Up Old Images

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'

jobs:
  clean-up-images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install dependencies
        run: pip install requests

      - name: Clean up old images
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 <<EOF
import os
import requests

def clean_up_github_images():
    repo_name = "osteolab/pictograph_bonecheck"
    token = os.environ['GITHUB_TOKEN']
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    contents_url = f"https://api.github.com/repos/{repo_name}/contents/"

    try:
        response = requests.get(contents_url, headers=headers)
        response.raise_for_status()
        files = response.json()

        images = [f for f in files if f["name"].endswith(".png")]
        images = sorted(images, key=lambda x: x["name"], reverse=True)

        if len(images) > 10:
            for image in images[10:]:
                delete_url = f"https://api.github.com/repos/{repo_name}/contents/{image['path']}"
                sha = image['sha']
                delete_response = requests.delete(
                    delete_url,
                    headers=headers,
                    json={
                        "message": f"Delete old image {image['name']}",
                        "sha": sha
                    }
                )
                if not delete_response.ok:
                    raise Exception(f"Failed to delete {image['name']}: {delete_response.text}")
                print(f"Deleted: {image['name']}")

    except Exception as e:
        raise RuntimeError(f"Error during cleanup: {e}")

clean_up_github_images()
EOF
