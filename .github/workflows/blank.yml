name: Clean Up Old Images

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'

jobs:
  clean-up-images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install requests package
        run: pip install requests

      - name: Clean up old images
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running cleanup script..."
          echo "
import os
import requests

REPO = 'osteolab/pictograph_bonecheck'
API_URL = f'https://api.github.com/repos/{REPO}/contents/'
HEADERS = {
    'Authorization': f'Bearer {os.environ["GITHUB_TOKEN"]}',
    'Accept': 'application/vnd.github.v3+json'
}

def clean_up_images():
    response = requests.get(API_URL, headers=HEADERS)
    if response.status_code != 200:
        raise Exception(f'Failed to fetch repo contents: {response.text}')
    
    files = response.json()
    images = [f for f in files if f['name'].endswith('.png')]
    images = sorted(images, key=lambda x: x['name'], reverse=True)

    for image in images[10:]:
        delete_url = f'https://api.github.com/repos/{REPO}/contents/{image["path"]}'
        delete_response = requests.delete(
            delete_url,
            headers=HEADERS,
            json={
                'message': f'Auto delete old image: {image["name"]}',
                'sha': image['sha']
            }
        )
        if delete_response.status_code != 200:
            raise Exception(f'Failed to delete {image["name"]}: {delete_response.text}')
        print(f'Deleted {image["name"]}')

clean_up_images()
" > script.py && python3 script.py
